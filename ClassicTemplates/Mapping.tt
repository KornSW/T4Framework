<#@ template language="VB" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.VB.ttinclude"#>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".Generated.vb"#>
<#

'  +----------------------------------------------------------------------------+
'  ¦ This file is an open-source template which is using some code from a       ¦
'  ¦ T4 Template deliverd with Microsoft EntityFramework 4-6 (licensed under    ¦
'  ¦ the Microsoft Public License) in a modified version to generate            ¦
'  ¦ "CodeFirst"-compatible MAPPING-CONFIGURATION-CLASSES's from a EDMX-Model.  ¦ 
'  +----------------------------------------------------------------------------+
'  ¦ > the modification was made by:  T.Korn  /  last change: 03.08.2017        ¦
'  ¦ > the newest version of this file can be found here:                       ¦
'  ¦   https://github.com/KornSW/T4Framework (under 'ClassicTemplates')         ¦
'  ¦ > the removal of this notice is prohibited!                                ¦
'  +----------------------------------------------------------------------------+
'  ¦ THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF ANY KIND, EITHER         ¦
'  ¦ EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A      ¦
'  ¦ PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.                  ¦
'  +----------------------------------------------------------------------------+

Dim code As New CodeGenerationTools(Me)
Dim loader As New MetadataLoader(Me)
Dim region As New CodeRegion(Me, 1)
Dim ef As New MetadataTools(Me)

Const inputFile As String = ".\Model.edmx"
Dim tablePrefix As String = ""

Dim ItemCollection As EdmItemCollection = loader.CreateEdmItemCollection(inputFile)
Dim namespaceName As String = code.VsNamespaceSuggestion()
Dim nullableString As String
Dim entitySetNames As New Dictionary(Of String, String)

Dim associations As IEnumerable(Of AssociationType) = ItemCollection.OfType(Of AssociationType)()
Dim fkIdProperties As New List(Of String)
Dim fkNameRegister As New Dictionary(Of String, String())
For Each a As AssociationType In associations
  Dim names As New List(Of String)
    If(a.ReferentialConstraints.Count > 0)        
        For Each p As EdmProperty In a.ReferentialConstraints.Item(0).ToProperties
            names.Add(p.name)
            fkIdProperties.Add(code.Escape(p.DeclaringType) & "." & p.name) 
        Next
    End If
   fkNameRegister.Add(code.Escape(a.FullName), names.ToArray())
Next

Dim fileManager As EntityFrameworkTemplateFileManager = EntityFrameworkTemplateFileManager.Create(Me)
WriteHeader(fileManager)

Dim container As EntityContainer = ItemCollection.OfType(Of EntityContainer)().FirstOrDefault()
For Each entitySet As EntitySet In container.BaseEntitySets.OfType(Of EntitySet)()
   entitySetNames.Add(code.Escape(entitySet.ElementType),code.Escape(entitySet))
Next

'PRE EVALUATION OF ALL ASSOCIATIONS, TO DECIDE, IF FK-FIELDS ARE MAPPABLE TO REAL PROPERTIES 
Dim fkPropertySupportable As New Dictionary(Of EdmProperty, Boolean)
For Each loopEntity As EntityType In ItemCollection.GetItems(Of EntityType)().OrderBy(Function(e) e.Name)

    Dim entity as EntityType = loopEntity
    Dim localEntityShortCut As String = BuildShortCut(code.Escape(entity))
    Dim navigationProperties as IEnumerable(Of NavigationProperty) = entity.NavigationProperties.Where(Function(np) np.DeclaringType Is entity)

    If (navigationProperties.Any()) Then
        For Each localNavigationProperty As NavigationProperty In navigationProperties
          Dim localEnd = localNavigationProperty.FromEndMember
          Dim remoteEnd = localNavigationProperty.ToEndMember
          Dim remoteEntity As EntityType = remoteEnd.GetEntityType()
          Dim association = DirectCast(localNavigationProperty.RelationshipType, AssociationType)
      'the mapping definition has a syntactical problem when specifiing foreigen key fields for (0/1)-(1) relations!
      'the fluent command 'HasForeignKey'cannot be used, so we need to use 'MapKey'
      Dim mappingVia_HasForeignKey_NotSupported = (association.ReferentialConstraints.Count > 1) OrElse (Not ((localEnd.RelationshipMultiplicity = RelationshipMultiplicity.Many) Or (remoteEnd.RelationshipMultiplicity = RelationshipMultiplicity.Many)))
      If(association.ReferentialConstraints.Count > 0)Then
        'in most cases the FK fields are not mappable to real Properties
      'so, by default, were removing them form the property list
      'to skip the code generation for them...
        For Each p As EdmProperty In association.ReferentialConstraints.Item(0).ToProperties	
        If (Not fkPropertySupportable.ContainsKey(p)) Then
          fkPropertySupportable.Add(p, False)
        End If
      Next
        If(association.ReferentialConstraints.Item(0).ToProperties.Count = 1)Then
        fkPropertySupportable(association.ReferentialConstraints.Item(0).ToProperties().Item(0)) = Not mappingVia_HasForeignKey_NotSupported
      End If		 
      End If
        Next
    End If
Next

For Each loopEntity As EntityType In ItemCollection.GetItems(Of EntityType)().OrderBy(Function(e) e.Name)
    Dim entity as EntityType = loopEntity
    Dim localEntityShortCut As String = BuildShortCut(code.Escape(entity))
  Dim primitiveProperties as IEnumerable(Of EdmProperty) = entity.Properties.Where(Function(p) TypeOf p.TypeUsage.EdmType Is PrimitiveType AndAlso p.DeclaringType Is entity)

  If(Not entity.Name.StartsWith("EXTERNAL_"))Then

  'KEYSETS SAMMELN
  Dim keySets As New Dictionary(Of String, List(Of EdmProperty))
    If primitiveProperties.Any() Then
        For Each edmProperty As EdmProperty In primitiveProperties
          Dim propString As String = code.Escape(entity)  & "." & code.Escape(edmProperty)
          If(Not FkIdProperties.Contains(propString))Then
      If (edmProperty.Documentation IsNot Nothing AndAlso Not String.IsNullOrEmpty(edmProperty.Documentation.LongDescription))
        For Each keySetName As String In edmProperty.Documentation.LongDescription.Split(";"c)
          keySetName = keySetName.Trim()
          If(Not keySets.ContainsKey(keySetName))
            keySets.Add(keySetName, new List(Of EdmProperty))
          End If
          keySets(keySetName).Add(edmProperty)
        Next
      End If
      End If
    Next
    End If

    CheckName(entity.Name)

    fileManager.StartNewFile(entity.Name & "_Mapping.Generated.vb")
#>
<#
    BeginNamespace(namespaceName, code)
    'Dim primitiveProperties as IEnumerable(Of EdmProperty) = entity.Properties.Where(Function(p) TypeOf p.TypeUsage.EdmType Is PrimitiveType AndAlso p.DeclaringType Is entity)
#>
Public Partial Class <#=code.Escape(entity)#>_Mapping
  Inherits EntityTypeConfiguration(Of <#=code.Escape(entity)#>)
<#
    If(entity.BaseType IsNot Nothing)Then
#>
  '<#=code.Escape(entity)#> inherits <#=code.Escape(entity.BaseType).Replace("EXTERNAL_","")#>
<#
    End If
#>

<#

    Dim setName As String
    Dim baseEntity As EntityType
    baseEntity = entity
    Do While(baseEntity.BaseType IsNot Nothing)
      baseEntity = baseEntity.BaseType
    Loop
    If(entitySetNames.ContainsKey(code.Escape(entity)))Then
      setName = entitySetNames(code.Escape(entity))
    ElseIf(entitySetNames.ContainsKey(code.Escape(baseEntity)))Then
      setName = entitySetNames(code.Escape(baseEntity)) & "Of" & code.Escape(entity)
    Else
      setName = code.Escape(entity) & "Items"
    End If


    If(Not setName = String.Empty)Then
#>
  Private Const _TableName As String = "<#=tablePrefix#><#=setName.Replace("EXTERNAL_","")#>"

  Public Sub New()

    Me.ToTable(_TableName)

<#
    Else
#>
  Public Sub New()

    'You need to manually specify the 'Private Const _TableName As String' in a partial class! This is
    'because inherited entities have no 'EntitySetName' and we have no plural string for "<#=code.Escape(entity)#>"
    Me.ToTable(_TableName)

<#   
    End If

    If (primitiveProperties.Any()) Then

      'COLLECT THE KEY-PROPERTIES
      Dim keyProps As New List(Of String)
      For Each edmProperty As EdmProperty In primitiveProperties      
        If(ef.IsKey(edmProperty))
          keyProps.Add(string.Format("{0}.{1}", localEntityShortCut, code.Escape(edmProperty.Name)))
        End If
      Next
      Select Case keyProps.Count
        Case 1
 #>
    Me.HasKey(Function(<#=localEntityShortCut#>) <#=keyProps(0)#>)

<#
        Case Is > 1
#>
    Me.HasKey(Function(<#=localEntityShortCut#>) New With {<#=String.Join(", ", keyProps)#>})

<#
      End Select

      For Each edmProperty As EdmProperty In primitiveProperties
        Dim propString As String = code.Escape(entity)  & "." & code.Escape(edmProperty)

    Dim skipPropertyGeneration As Boolean = False
    If(fkPropertySupportable.ContainsKey(edmProperty))Then
      skipPropertyGeneration = Not fkPropertySupportable(edmProperty)
    End If

        If(Not skipPropertyGeneration)Then
    'FkIdProperties will be processed after the relationship has been defined... 
    'we need to wait after this point because we need to know if the FK field is mappable to an 
    'property or not...

        Dim typeName As String = code.Escape(edmProperty.TypeUsage).ToLower()
        If(code.Escape(edmProperty.Name).ToLower()="rowversion" andalso typeName = "byte()")Then
          typeName = "rowversion"
        End If

    If(edmProperty.Nullable)
      nullableString = ".IsOptional()"
    Else
      nullableString = ".IsRequired()"

      Dim sgp As String = edmProperty.MetadataProperties.
        Where(Function(mdp) mdp.Name.Contains("StoreGeneratedPattern")).
        Select(Function(mdp) mdp.Value).SingleOrDefault

      If(sgp is Nothing)Then
        sgp = "None"
      End If

      If(ef.IsKey(edmProperty) OrElse sgp <> "None")Then
        Select Case sgp
          Case "None"
            nullableString = nullableString & ".HasDatabaseGeneratedOption(DatabaseGeneratedOption.None)"
          Case "Identity"
            nullableString = nullableString & ".HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity)"
          Case "Computed"
            nullableString = nullableString & ".HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed)"
        End Select
      End If

    End If
   
        Select Case typeName
          Case "rowversion"
#>
    Me.Property(Function(<#=localEntityShortCut#>) <#=localEntityShortCut#>.<#=code.Escape(edmProperty.Name)#>).IsRowVersion()
<#	  
          Case "decimal", "double"
#>
    Me.Property(Function(<#=localEntityShortCut#>) <#=localEntityShortCut#>.<#=code.Escape(edmProperty.Name)#>).HasColumnName("<#=code.Escape(edmProperty.Name)#>")<#=nullableString#>.HasPrecision(18,4)
<#	  
          Case "integer", "int32", "int64"
#>
    Me.Property(Function(<#=localEntityShortCut#>) <#=localEntityShortCut#>.<#=code.Escape(edmProperty.Name)#>).HasColumnName("<#=code.Escape(edmProperty.Name)#>")<#=nullableString#>
<#	  
          Case "string"
            Dim maxLength As String = edmProperty.TypeUsage.Facets("MaxLength").Value
            If(Not String.IsNullOrEmpty(maxLength) AndAlso Not maxLength.ToLower()="max")Then
#>
    Me.Property(Function(<#=localEntityShortCut#>) <#=localEntityShortCut#>.<#=code.Escape(edmProperty.Name)#>).HasColumnName("<#=code.Escape(edmProperty.Name)#>").HasMaxLength(<#=maxLength#>)<#=nullableString#>
<#	  
            Else
#>
    Me.Property(Function(<#=localEntityShortCut#>) <#=localEntityShortCut#>.<#=code.Escape(edmProperty.Name)#>).HasColumnName("<#=code.Escape(edmProperty.Name)#>")<#=nullableString#>
<#	  
            End If

          Case Else
#>
    Me.Property(Function(<#=localEntityShortCut#>) <#=localEntityShortCut#>.<#=code.Escape(edmProperty.Name)#>).HasColumnName("<#=code.Escape(edmProperty.Name)#>")<#=nullableString#>
<#	  
        End Select

        End If
      Next
    End If

    Dim complexProperties as IEnumerable(Of EdmProperty) = entity.Properties.Where(Function(p) TypeOf p.TypeUsage.EdmType Is ComplexType AndAlso p.DeclaringType Is entity)
    If complexProperties.Any() Then
       For Each complexProperty As EdmProperty In complexProperties
            'WriteComplexProperty(code, complexProperty)
       Next
    End If

    Dim navigationProperties as IEnumerable(Of NavigationProperty) = entity.NavigationProperties.Where(Function(np) np.DeclaringType Is entity)
    If (navigationProperties.Any()) Then

        For Each localNavigationProperty As NavigationProperty In navigationProperties

          Dim localEnd = localNavigationProperty.FromEndMember
          Dim remoteEnd = localNavigationProperty.ToEndMember
          Dim remoteEntity As EntityType = remoteEnd.GetEntityType()
          Dim association = DirectCast(localNavigationProperty.RelationshipType, AssociationType)
          Dim associationName = code.Escape(association.FullName).Split(".")(code.Escape(association.FullName).Split(".").Length - 1).Replace("EXTERNAL_","")
          Dim cascadeDelete As Boolean = False
          Dim localIsPrimarySide As Boolean = ((localEnd.RelationshipMultiplicity = RelationshipMultiplicity.One) Or (remoteEnd.RelationshipMultiplicity = RelationshipMultiplicity.Many))
      
      'the mapping definition has a syntactical problem when specifiing foreigen key fields for (0/1)-(1) relations!
      'the fluent command 'HasForeignKey'cannot be used, so we need to use 'MapKey'
      Dim mappingVia_HasForeignKey_NotSupported = (association.ReferentialConstraints.Count > 1) OrElse (Not ((localEnd.RelationshipMultiplicity = RelationshipMultiplicity.Many) Or (remoteEnd.RelationshipMultiplicity = RelationshipMultiplicity.Many)))

          Dim foreignKeyDefinition As String = String.Empty
          Dim remoteNavPropString As String = String.Empty
          Dim remoteNavProperty As NavigationProperty = remoteEntity.NavigationProperties.Where(Function(n) ReferenceEquals(n.RelationshipType, localNavigationProperty.RelationshipType) And Not ReferenceEquals(n , localNavigationProperty)).SingleOrDefault()
          Dim localRelationInfoString As String
          Dim remoteRelationInfoString As String
          Dim remoteEntityShortCut As String = BuildShortCut(code.Escape(remoteEntity))

          If(remoteNavProperty IsNot Nothing)Then
              remoteNavPropString = "Function(" & remoteEntityShortCut & ") " & remoteEntityShortCut & "." & code.Escape(remoteNavProperty)
          End If

      If(association.ReferentialConstraints.Count > 0)Then

        'in most cases the FK fields are not mappable to real Properties
      'so, by default, were removing them form the property list
      'to skip the code generation for them...
        For Each p As EdmProperty In association.ReferentialConstraints.Item(0).ToProperties
        If(FkIdProperties.Contains(p.Name))Then
          FkIdProperties.Remove(p.Name)
        End If
      Next

        If(association.ReferentialConstraints.Item(0).ToProperties.Count = 1)Then
          If(mappingVia_HasForeignKey_NotSupported)Then	  
            foreignKeyDefinition ="Map(Sub(m) m.MapKey(""" & association.ReferentialConstraints.Item(0).ToProperties().Item(0).Name & """))"
          Else
            Dim fkPropName As String = association.ReferentialConstraints.Item(0).ToProperties().Item(0).Name
            If(localIsPrimarySide)Then
              foreignKeyDefinition = "HasForeignKey(Function(" & code.Escape(remoteEntityShortCut) & ") " & code.Escape(remoteEntityShortCut) & "." & fkPropName & ")"
            Else
              foreignKeyDefinition = "HasForeignKey(Function(" & code.Escape(localEntityShortCut) & ") " & code.Escape(localEntityShortCut) & "." & fkPropName & ")"
            End If
            'now we can add the property again (it was previously removed...)
            FkIdProperties.Add(fkPropName)
          End If
        ElseIf(association.ReferentialConstraints.Item(0).ToProperties.Count > 1)Then
          Dim propertyNames As New List(Of String)
          For each prop As EdmProperty In association.ReferentialConstraints.Item(0).ToProperties()
            propertyNames.Add(prop.Name)
          Next
          'Dim propertyNames =.ToArray().Select(Function(k) k.Name)
          foreignKeyDefinition ="Map(Sub(m) m.MapKey(""" & String.Join(""", """, propertyNames) & """))"
        End If		 
      End If
      If(foreignKeyDefinition = String.Empty)Then
      foreignKeyDefinition = "Map(Sub(m) m.MapKey(""Fk" & associationName & """))"
      End If

          'pre-evaluate the delete behaviour
          If(localIsPrimarySide)Then
              cascadeDelete = (localEnd.DeleteBehavior = OperationAction.Cascade)
          Else
              cascadeDelete = (remoteEnd.DeleteBehavior = OperationAction.Cascade)
          End If
        
          Select localEnd.RelationshipMultiplicity
            Case RelationshipMultiplicity.Many:       localRelationInfoString = "ME (*)"
            Case RelationshipMultiplicity.One:        localRelationInfoString = "ME (1)"
            Case RelationshipMultiplicity.ZeroOrOne:  localRelationInfoString = "ME (0/1)"
          End Select
          Select remoteEnd.RelationshipMultiplicity
            Case RelationshipMultiplicity.Many:       remoteRelationInfoString = "(*) " & code.Escape(remoteEntity).ToUpper().Replace("EXTERNAL_","")
            Case RelationshipMultiplicity.One:        remoteRelationInfoString = "(1) " & code.Escape(remoteEntity).ToUpper().Replace("EXTERNAL_","")
            Case RelationshipMultiplicity.ZeroOrOne:  remoteRelationInfoString = "(0/1) " & code.Escape(remoteEntity).ToUpper().Replace("EXTERNAL_","")
          End Select

          'find out, if we are the side, on which the reference must be defined
          If(Not localIsPrimarySide OrElse remoteNavProperty Is Nothing)Then

              If(localIsPrimarySide)Then
#>

    'Special Case! The foreign entity which is pointing to us has no navigation property,
    'so we need to specyfy the relationship here on the primary side!
    '
    '<#=localRelationInfoString#> <<< <#=remoteRelationInfoString#>
<#
              Else
#>

    '<#=localRelationInfoString#> >>> <#=remoteRelationInfoString#>
<#
              End If
              
              Select remoteEnd.RelationshipMultiplicity
                Case RelationshipMultiplicity.Many
#>    Me.HasMany(Function(<#=code.Escape(localEntityShortCut)#>) <#=code.Escape(localEntityShortCut)#>.<#=code.Escape(localNavigationProperty)#>).
<#
                Case RelationshipMultiplicity.One
#>    Me.HasRequired(Function(<#=code.Escape(localEntityShortCut)#>) <#=code.Escape(localEntityShortCut)#>.<#=code.Escape(localNavigationProperty)#>).
<#
                Case RelationshipMultiplicity.ZeroOrOne
#>    Me.HasOptional(Function(<#=code.Escape(localEntityShortCut)#>) <#=code.Escape(localEntityShortCut)#>.<#=code.Escape(localNavigationProperty)#>).
<#
              End Select

              Select localEnd.RelationshipMultiplicity
                Case RelationshipMultiplicity.Many
#>      WithMany(<#=remoteNavPropString#>).
<#
                Case RelationshipMultiplicity.One
#>      WithRequired(<#=remoteNavPropString#>).
<#
                Case RelationshipMultiplicity.ZeroOrOne
#>      WithOptional(<#=remoteNavPropString#>).
<#
              End Select

#>      <#=foreignKeyDefinition#>.
<#

              If(cascadeDelete)Then
#>      WillCascadeOnDelete(True)
<#
              Else
#>      WillCascadeOnDelete(False)
<#
              End If

           End If
        Next
    End If

  For Each keySetName As String In keySets.Keys
    Dim keySetPropertyList As List(Of EdmProperty) = keySets(keySetName)
    Dim first as Boolean = True	
    Dim isPK As Boolean = (keySetPropertyList.Count=1 AndAlso ef.IsKey(keySetPropertyList(0)))
    If(Not isPK)Then
      Dim usesUnsupportetProperties As Boolean = False
      Dim uniqeDefinition As String = "    'KeySet '" & keySetName & "'" & vbCrLf & "    Me.HasUniqueConstraint(""UNQ_" & keySetName & """, Function(" & localEntityShortCut & ") {"
      For Each keyProperty As EdmProperty In keySetPropertyList
        If (fkPropertySupportable.ContainsKey(keyProperty) AndAlso fkPropertySupportable(keyProperty)=False) Then
          usesUnsupportetProperties = True
        End If
        If(first)Then
          first = False
        Else
          uniqeDefinition += ", "
        End If
        uniqeDefinition = uniqeDefinition + localEntityShortCut + "." + code.Escape(keyProperty)
      Next
      If (usesUnsupportetProperties)Then
        uniqeDefinition = "'THE COMPILATION ERROR(S) IN THE LINE BELOW, IS BECAUSE SOME ASSOCIATION TYPES NOT SUPPORTING FOREIGEN KEY PROPERTIES! AND SO THIS PROPERTIES WILL NOT BE GENERATED IN CODE!" & vbCrLf & uniqeDefinition
      End If
      uniqeDefinition += "})"
#>

<#=uniqeDefinition #>
<#
    End If
  Next
#>

    Me.Customize()
  End Sub

  Private Partial Sub Customize
  End Sub

End Class
<#
    EndNamespace(namespaceName)
  end if
Next

For Each loopComplex As ComplexType In ItemCollection.GetItems(Of ComplexType)().OrderBy(Function(e) e.Name)
    Dim complex as ComplexType = loopComplex
    fileManager.StartNewFile(complex.Name & ".vb")
#>

<#
    BeginNamespace(namespaceName, code)
#>
Partial <#=Accessibility.ForType(complex)#> Class <#=code.Escape(complex)#>
<#

    Dim primitiveProperties as IEnumerable(Of EdmProperty) = complex.Properties.Where(Function(p) TypeOf p.TypeUsage.EdmType Is PrimitiveType AndAlso p.DeclaringType Is complex)
    If primitiveProperties.Any() Then
        For Each edmProperty As EdmProperty In primitiveProperties
            WriteProperty(code, edmProperty)
        Next
    End If

    Dim complexProperties as IEnumerable(Of EdmProperty) = complex.Properties.Where(Function(p) TypeOf p.TypeUsage.EdmType Is ComplexType AndAlso p.DeclaringType Is complex)
    If complexProperties.Any() Then
#>

<#
        For Each complexProperty As EdmProperty In complexProperties
            WriteComplexProperty(code, complexProperty)
        Next
    End If

#>

End Class
<#
    EndNamespace(namespaceName)
Next

If Not VerifyTypesAreCaseInsensitiveUnique(ItemCollection) Then
    Return ""
End If

fileManager.Process()
#>
<#+

  Private Function BuildShortCut(name As String) As String
    Dim shortCut As String = String.Empty

    For i As Integer = 0 To (name.length - 1)
      If(Char.IsUpper(name(i)))Then
        shortCut += name(i).ToString()
      End If
    Next

    If (shortCut = String.Empty) Then
      shortCut = name(0).ToString()
    End If

  shortCut = shortCut.ToLower()

  Dim keyWords As String() = {"me","to","if", "as", "in", "of"}
  If(keyWords.Contains(shortCut))Then
    shortCut = "[" & shortCut & "]"
  End If

    Return shortCut
  End Function


Private Sub WriteHeader(ByVal fileManager As EntityFrameworkTemplateFileManager)
    fileManager.StartHeader()
#>
'==============================================================================
' Auto-generated code
'==============================================================================
' This code was generated from a T4 template.
' Manual changes to this file may cause unexpected behavior in your application.
' Manual changes to this file will be overwritten if the code is regenerated.
'==============================================================================

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.ComponentModel
Imports System.ComponentModel.DataAnnotations.Schema
Imports System.Data.Entity.ModelConfiguration
Imports System.Diagnostics

<#+
    FileManager.EndBlock()
End Sub

Private Sub BeginNamespace(ByVal namespaceName As String, ByVal code As CodeGenerationTools)
    Dim region As CodeRegion = New CodeRegion(Me)
    If Not String.IsNullOrEmpty(namespaceName) Then
#>
Namespace <#=code.EscapeNamespace(namespaceName)#>

<#+
        PushIndent(CodeRegion.GetIndent(1))
    End If
End Sub

Private Sub EndNamespace(namespaceName As String)
    If Not String.IsNullOrEmpty(namespaceName) Then
        PopIndent()
#>

End Namespace
<#+
    End If
End Sub


Private Sub WriteProperty(code As CodeGenerationTools, edmProperty As EdmProperty)	
    Dim prop = DirectCast(edmProperty.TypeUsage.EdmType, PrimitiveType)
    
    If prop.PrimitiveTypeKind = PrimitiveTypeKind.DateTime Then
        WriteProperty(code, edmProperty, code.StringBefore(" = ", "#01/01/1900#"))
    ElseIf prop.PrimitiveTypeKind = PrimitiveTypeKind.String Then
        WriteProperty(code, edmProperty, code.StringBefore(" = ", "String.Empty"))
    Else
        WriteProperty(code, edmProperty, code.StringBefore(" = ", code.CreateLiteral(edmProperty.DefaultValue)))
    End If
End Sub

Private Sub WriteComplexProperty(code As CodeGenerationTools, complexProperty As EdmProperty)
    WriteProperty(code, complexProperty, " = New " & code.Escape(complexProperty.TypeUsage))
End Sub

Private Sub WriteProperty(code As CodeGenerationTools, edmProperty As EdmProperty, defaultValue As String)
    WriteProperty(Accessibility.ForProperty(edmProperty), _
                  code.Escape(edmProperty.TypeUsage), _
                  code.Escape(edmProperty), _
                  code.SpaceAfter(Accessibility.ForGetter(edmProperty)), _
                  code.SpaceAfter(Accessibility.ForSetter(edmProperty)), _
                  defaultValue)
End Sub

Private Sub WriteNavigationProperty(code As CodeGenerationTools, navigationProperty As NavigationProperty)
    Dim endType = code.Escape(navigationProperty.ToEndMember.GetEntityType())
    Dim defaultValue = ""
    Dim propertyType = code.Escape(endType)
    
    If(navigationProperty.ToEndMember.RelationshipMultiplicity = RelationshipMultiplicity.Many)
        defaultValue = " = New ObservableSet(Of " & propertyType & ")"
        propertyType = "IQueryableSet(Of " & propertyType & ")"
    End If

    CheckName(code.Escape(navigationProperty))

    WriteProperty(PropertyAccessibilityAndVirtual(navigationProperty), _
                  propertyType, _
                  code.Escape(navigationProperty), _
                  code.SpaceAfter(Accessibility.ForGetter(navigationProperty)), _
                  code.SpaceAfter(Accessibility.ForSetter(navigationProperty)), _
                  defaultValue)
End Sub

Private Sub WriteProperty(accessibility As String, type As String, name As String, getterAccessibility As String, setterAccessibility As String, defaultValue As String)
   CheckName(name)
   If ([String].IsNullOrEmpty(getterAccessibility) AndAlso [String].IsNullOrEmpty(setterAccessibility))
#>
    <#=accessibility#> Property <#=name#> As <#=type#><#=defaultValue#>
<#+
    Else
#>

    Private _<#=name#> As <#=type#><#=defaultValue#>
    <#=accessibility#> Property <#=name#> As <#=type#>
        <#=getterAccessibility#>Get
            Return _<#=name#>
        End Get
        <#=setterAccessibility#>Set(ByVal value As <#=type#>)
            _<#=name#> = value
        End Set
    End Property
<#+
    End If
End Sub

Private Function PropertyAccessibilityAndVirtual(ByVal member As EdmMember) As String
    Dim propertyAccess As String = Accessibility.ForProperty(member)
    Dim setAccess as String = Accessibility.ForSetter(member)
    Dim getAccess as String = Accessibility.ForGetter(member)
    If propertyAccess <> "Private" AndAlso setAccess <> "Private" AndAlso getAccess <> "Private" Then
        Return propertyAccess & " Overridable"
    End If

    Return propertyAccess
End Function

Private Function VerifyTypesAreCaseInsensitiveUnique(ByVal itemCollection As EdmItemCollection) As Boolean
    Dim alreadySeen As New Dictionary(Of String, Boolean)(StringComparer.OrdinalIgnoreCase)

    For Each type As StructuralType In itemCollection.GetItems(Of StructuralType)()
        If Not (TypeOf type Is EntityType OrElse TypeOf type Is ComplexType) Then
            Continue For
        End If

        If alreadySeen.ContainsKey(type.FullName) Then
            [Error](String.Format("This template does not support types that differ only by case, the types {0} are not supported", type.FullName))
            Return False
        Else
            alreadySeen.Add(type.FullName, True)
        End If
    Next

    Return True
End Function

Private Sub CheckName(name As String)
    name = name.ToLower()
    If (name.Contains("ä")) Then
        Throw New ArgumentException(String.Format("Der Name '{0}' enthält ein 'ä' und ist somit ungültig!", name))
    End If
    If (name.Contains("ö")) Then
        Throw New ArgumentException(String.Format("Der Name '{0}' enthält ein 'ö' und ist somit ungültig!", name))
    End If
    If (name.Contains("ü")) Then
        Throw New ArgumentException(String.Format("Der Name '{0}' enthält ein 'ü' und ist somit ungültig!", name))
    End If
    If (name.Contains("ß")) Then
        Throw New ArgumentException(String.Format("Der Name '{0}' enthält ein 'ß' und ist somit ungültig!", name))
    End If
End sub

#>